# AppVeyor.com is a Continuous Integration service to build and run tests under
# Windows

environment:
  global:
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\ci_scripts\\appveyor\\run_with_env.cmd"
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script interpreter
    # See: http://stackoverflow.com/a/13751649/163740
    WHEELHOUSE_UPLOADER_USERNAME: ysig
    MODULE: grakel
    PROJECT_NAME: grakel
    TWINE_USERNAME: ysig 

  matrix:
    - PYTHON_VERSION: "2.7.14"
      PYTHON_ARCH: "64"
      MINICONDA: "C:\\Miniconda-x64"
      DEPLOY_WHEEL: "true"

    - PYTHON_VERSION: "3.5.3"
      PYTHON_ARCH: "64"
      MINICONDA: "C:\\Miniconda35-x64"
      DEPLOY_WHEEL: "true"

    - PYTHON_VERSION: "3.6.4"
      PYTHON_ARCH: "64"
      MINICONDA: "C:\\Miniconda36-x64"
      DEPLOY_WHEEL: "true"

    - PYTHON_VERSION: "3.7.4"
      PYTHON_ARCH: "64"
      MINICONDA: "C:\\Miniconda37-x64"
      DEPLOY_WHEEL: "true"

install:
  # Initialise conda
  - "set PATH=%MINICONDA%;%MINICONDA%\\Scripts;%PATH%"
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a

  # Make venv and install dependencies
  - "conda create -q -n grakel python=%PYTHON_VERSION%"
  - "conda install -n grakel pip \"pandas\" \"future>=0.16.0\" \"six>=1.11.0\" \"numpy>=1.14.0\" \"scipy>=1.0.1\" \"cython>=0.27.3\" \"nose>=1.1.2\" \"scikit-learn>=0.19.0\" \"networkx>=2.0.0\" setuptools wheel"
  - "conda update -n grakel setuptools wheel"
  - "activate grakel"
  - "pip install cvxopt>=1.2.0 wheelhouse_uploader nose-timer --upgrade"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
  - "pip --version"
  
  # Install project
  - "%CMD_IN_ENV% python setup.py bdist_wheel bdist_wininst"
  - ps: "ls dist"
  
  # Install the generated wheel package to test it
  - "pip install --pre --no-index --find-links dist %PROJECT_NAME%"


# Not a .NET project, we build scikit-learn in the install step instead
build: false


artifacts:
  # Archive the generated wheel package in the ci.appveyor.com build report.
  - path: dist\*


on_success:
  # Upload the generated wheel to pypi
  - >
    IF "%DEPLOY_WHEEL%" == "true"
    (
    cd %APPVEYOR_BUILD_FOLDER%
    &&
    python -m pip install twine
    &&
    python -m twine upload dist/*.whl && exit 0
    )


test_script:
  # Change to a non-source folder to make sure we run the tests on the installed library.
  - "mkdir empty_folder"
  - "cd empty_folder"

  - "python -c \"import nose; nose.main()\" --with-timer --timer-top-n 120 -s -v %MODULE%"

  # Move back to the project folder
  - "cd .."


cache:
  # Use the appveyor cache to avoid re-downloading large archives such
  # the MKL numpy and scipy wheels mirrored on a rackspace cloud
  # container, speed up the appveyor jobs and reduce bandwidth
  # usage on our rackspace account.
  - '%APPDATA%\pip\Cache'
